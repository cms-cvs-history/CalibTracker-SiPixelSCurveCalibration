process pixelscurvecalib = 
{
   untracked PSet maxEvents = {untracked int32 input = -1}

   # Input source
   include "IORawData/SiPixelInputSources/data/PixelSLinkDataInputSource.cfi"
   replace PixelSLinkDataInputSource.fileNames={'rfio:/castor/cern.ch/user/e/ecklund/TIF_DATA/SCurve_hd-z1_bld4_5_6_dac1_070622_2x2.dmp'}
   replace PixelSLinkDataInputSource.fedid=33
	
  # cabling
  include "CondCore/DBCommon/data/CondDBCommon.cfi"
  replace CondDBCommon.connect = "sqlite_file:cabling.db"
  replace CondDBCommon.catalog = "file:cablingCatalog.xml"
  replace CondDBCommon.timetype = "runnumber"
  replace CondDBCommon.DBParameters.messageLevel = 1
  replace CondDBCommon.DBParameters.authenticationPath="."
  es_source = PoolDBESSource {
    using CondDBCommon
    VPSet toGet={{string record="SiPixelFedCablingMapRcd" string tag="SiPixelFedCablingMap_v1"}}
  }


  # Tracker SimGeometryXML
  include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"
  
  # Tracker Geometry Builder
  include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
 
  # Tracker Numbering Builder
  include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

  # Pixel RawToDigi conversion
  include "EventFilter/SiPixelRawToDigi/data/SiPixelRawToDigi.cfi"
  replace siPixelDigis.InputLabel = "source"


  service = TFileService {string fileName = "test.root" }

   # Message Logger
#   include "FWCore/MessageLogger/data/MessageLogger.cfi"
#   or use your own 
   service = MessageLogger {	
	untracked vstring destinations = {"cout"}
	untracked PSet cout = {untracked string threshold = "ERROR"}
	untracked PSet default = {untracked int32 limit = 10} # surpresses error messages in case of corrupt data files used as input for RawToDigi conversion
   }



   include "CalibTracker/SiPixelSCurveCalibration/data/SiPixelSCurveCalibrationAnalysis.cfi"	
	
   # module execution
   path p = { siPixelDigis, SiPixelGainCalibrationAnalysis }
}

